package maintenance;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;

import db.ConnectToDB;

public class AccountMaintenance implements AutoCloseable {
	private static final String QUERY = "SELECT * FROM ";
	private static final int NUMBER_OF_COLUMNS = 3;
	private ConnectToDB db;
	private static Connection connection;

	public AccountMaintenance(String user, String password) throws SQLException {
		db = new ConnectToDB(user, password);
		connection = db.getConnection();
	}

	public static void updateAccounts(String tableName, String tableUpdate) throws SQLException {
		Map<String, Account> accounts = getAccounts(tableName);
		
		
		
		//Query databasen, henter ut data, legger det i en list
		List<String> content = dbQuery(QUERY + tableUpdate);
		Map<String, AccountUpdate> accountUpdates = makeNewAccountUpdates(content, NUMBER_OF_COLUMNS);
		
	}

	public static Map<String, Account> getAccounts(String tableName) throws SQLException {
		try (Statement stmt = connection.createStatement()) {
			
			Map<String, Account> mapOfAccounts = new HashMap<String, Account>();
			
			List<String> content = dbQuery(QUERY + tableName);
			List<Account> newAccountObjects = makeNewAccounts(content, NUMBER_OF_COLUMNS);
			
			for (Account account2 : newAccountObjects) {
				mapOfAccounts.put(String.valueOf(account2.getAccountNumber()), account2);
			}
			
			return mapOfAccounts;
		}
	}
	
	public static Account getAccount(String tableName, String accountNumber) throws SQLException {
		String getAccQuery = tableName + " WHERE ACCOUNTNUMBER = " + accountNumber;
		
		List<String> accountData = dbQuery(QUERY + getAccQuery);
		
		Account account = new Account(
				Integer.valueOf(accountData.get(0)),
				Integer.valueOf(accountData.get(1)), 
				Double.valueOf(accountData.get(2))
				);
		
		return account;
	}
	
	public static List<String> dbQuery(String query) throws SQLException {
		try(Statement stmt = connection.createStatement()) {
			
			ResultSet rs = stmt.executeQuery(query);
			ResultSetMetaData rsMetaData = rs.getMetaData();
			
			List<String> content = new ArrayList<>();
			
			while(rs.next()) {
				for (int i = 1; i <= rsMetaData.getColumnCount(); i++) {
					content.add(rs.getObject(i).toString());
				}
			}
			return content;
		}
	}

	
	private static List<Account> makeNewAccounts(List<String> content, int numberOfColumns) {
		List<Account> account = new ArrayList<Account>();

		for (int i = 0; i < content.size(); i += numberOfColumns) {
			account.add(new Account(
					Integer.valueOf(content.get(i)),
					Integer.valueOf(content.get(i + 1)), 
					Double.valueOf(content.get(i + 2))
					));
		}
		return account;

	}
	
	private static Map<String, AccountUpdate> makeNewAccountUpdates(List<String> content, int numberOfColumns) {
		List<AccountUpdate> accountUpdates = new ArrayList<AccountUpdate>();
		Map<String, AccountUpdate> mapOfAccountUpdates = new HashMap<String, AccountUpdate>();
		
		for (int i = 0; i < content.size(); i += numberOfColumns) {
			accountUpdates.add(new AccountUpdate(
					Integer.valueOf(content.get(i)),
					String.valueOf(content.get(i + 1)),
					Double.valueOf(content.get(i + 2))
					));
		}
		for (AccountUpdate accountUpdate : accountUpdates) {
			mapOfAccountUpdates.put(String.valueOf(accountUpdate.getAccountNumber()), accountUpdate);
		}
		
		return mapOfAccountUpdates;
	}
	@Override
	public void close() throws Exception {
		connection.close();
		db.close();
	}
}
